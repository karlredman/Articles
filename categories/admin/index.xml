<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Admin on Articles</title>
    <link>https://karlredman.github.io/Articles/categories/admin/</link>
    <description>Recent content in Admin on Articles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Jun 2019 23:57:02 -0500</lastBuildDate>
    
	<atom:link href="https://karlredman.github.io/Articles/categories/admin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Randomize your XFCE / LightDM Login Screen Wallpaper</title>
      <link>https://karlredman.github.io/Articles/dev.to/xfce_login_wallpaper_cycle/</link>
      <pubDate>Mon, 24 Jun 2019 23:57:02 -0500</pubDate>
      
      <guid>https://karlredman.github.io/Articles/dev.to/xfce_login_wallpaper_cycle/</guid>
      <description>HowTo: randomize LightDM / XFCE v4.x login screen wallpaper images.
For fans of the lightweight and highly configurable linux desktop environment XFCE, with it&amp;rsquo;s default Greeter managed by LightDM, it&amp;rsquo;s a frustrating fact of reality that there is no built in way to randomize the login screen image. This simple perl script and directory layout will provide that service using a cron job. The process will copy a random image file from a directory that contains a pool of images into a &amp;lsquo;publish&amp;rsquo; directory; as background.</description>
    </item>
    
    <item>
      <title>Keycloak v5 &#43; Gatekeeper v5: Flowcharts - Easily Create and Restrict an Isolated (IODC) Client Service by Group-Role</title>
      <link>https://karlredman.github.io/Articles/dev.to/keycloakv5_oidc_client_flowcharts/</link>
      <pubDate>Sun, 28 Apr 2019 13:12:51 -0500</pubDate>
      
      <guid>https://karlredman.github.io/Articles/dev.to/keycloakv5_oidc_client_flowcharts/</guid>
      <description>This is another artifact from an upcoming series of articles that I&amp;rsquo;m writing for creating a home/laptop development laboratory ecosystem. I&amp;rsquo;m sharing these artifacts now because the series that I&amp;rsquo;m writing won&amp;rsquo;t be released for at least a month (It&amp;rsquo;s a huge undertaking -for me).
These flow charts demonstrate the simplest form (IMHO) of creating Keycloak client services behind an authentication/authorization proxy (Keycloak Gatekeeper). I imagine that if you are reading this article you are already frustrated with just creating a simple client in Keycloak and/or trying to figure out how to restrict authorization so that only specific users of a group are allowed to log in via Keycloak.</description>
    </item>
    
    <item>
      <title>Private Network &#43; Traefik &#43; Keycloak &#43; Gatekeeper Overview (diagram)</title>
      <link>https://karlredman.github.io/Articles/dev.to/traefik&#43;keycloak&#43;gatekeeper_diagram_overview/</link>
      <pubDate>Sun, 28 Apr 2019 12:37:00 -0500</pubDate>
      
      <guid>https://karlredman.github.io/Articles/dev.to/traefik&#43;keycloak&#43;gatekeeper_diagram_overview/</guid>
      <description>A high level network overview of Traefik, Keycloak, and Gatekeeper working together
This is yet another artifact [although ugly] from a project I&amp;rsquo;m working on. This diagram depicts a basic lab infrastructure with Traefik, Keyclaok, and Keycloak Gatekeeper working together behind a local DNS (dnsmasq). Details for how all of this actually fits together are forthcomming. For now, hopefully, it will be helpful for those who are wondering what the layout looks like when configuring these various components to work together.</description>
    </item>
    
    <item>
      <title>The Keycloak (v.5.0.0) UI mind map you didn&#39;t ask for</title>
      <link>https://karlredman.github.io/Articles/dev.to/keycloakv5_ui_mindmap/</link>
      <pubDate>Wed, 24 Apr 2019 13:27:21 -0500</pubDate>
      
      <guid>https://karlredman.github.io/Articles/dev.to/keycloakv5_ui_mindmap/</guid>
      <description>I&amp;rsquo;m working on a future set of articles for creating a home/laptop lab and needed a reference diagram. I figured that I might as well share. The diagram is meant to be a mid-level view to show where everything is located in the UI.
 Keycloak version: v5.0.0 Required fields: denoted by * suffex Original PlantUML source + Image files here</description>
    </item>
    
    <item>
      <title>Navigate your vscode like it&#39;s 1999 (the vim way)</title>
      <link>https://karlredman.github.io/Articles/dev.to/vscode1999/</link>
      <pubDate>Fri, 15 Mar 2019 07:44:19 -0500</pubDate>
      
      <guid>https://karlredman.github.io/Articles/dev.to/vscode1999/</guid>
      <description>If you are a vim person it can be frustraiting to work in vscode without vim keystrokes. The fantastic plugin vscodevim only goes so far. If you, like me, are used to M-h,M-j,M-k,M-l (where M == &amp;lsquo;Alt key&amp;rsquo;) and vim-like tab movements things get freaking nuts. Note that these keys in default vim are the same as pressing escape [I HATE ever having to hit the esc key -ever].</description>
    </item>
    
    <item>
      <title>Compile and install vim 8.1 from source (debian / MX Linux) with pyenv</title>
      <link>https://karlredman.github.io/Articles/dev.to/vim81/</link>
      <pubDate>Fri, 15 Mar 2019 07:41:28 -0500</pubDate>
      
      <guid>https://karlredman.github.io/Articles/dev.to/vim81/</guid>
      <description>This article is intended for advanced users -but to aid those who want to run cutting edge vim things.
 Vim 8.1 provides :terminal. This is BIG NEWS and has opened some pretty cool plugins such as markdown preview plugin for (neo)vim. Additionally, if you want deoplete.nvim to work properly you&amp;rsquo;ll need to compile vim against python3 anyway. The most single/main user way I&amp;rsquo;ve found to make these plugins work is to compile Vim from source.</description>
    </item>
    
  </channel>
</rss>